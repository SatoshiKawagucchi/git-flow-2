# library
import json
import requests

from datetime import datetime
from pprint import pprint

from pytz import timezone
from dateutil import parser


class RocketChatManager(object):
    def __init__(self):
        self.HEADERS ={
            'X-Auth-Token': 'zYGeveBMm79longHcJTwFi425FB6qyLxXDuRXUHAXDS',
            'X-User-Id': 'sny2QJnFfBHBK4Prc',
            'Content-Type': 'application/json'}
        
        self.URL = 'http://192.168.179.3:3000'
        
class RocketChatChannelManager(RocketChatManager):
    def __init__(self):
        super().__init__()
        if __DEBUG__:print(self.HEADERS, self.URL)
    
    def getChannelPubliclist(self):
        '''パブリックチャネルのリストと最終更新時間のマップ
        '''
        _list = []
        _map = {}
        API = f'{self.URL}/api/v1/channels.list'
        try:
            response = requests.get(
                API,
                headers=HEADERS,)    
        except Exception as e:
            print(f'{e}')
        finally:
            for l in response.json()['channels']:
                _map[l['name']] = l['_updatedAt']
                _list.append(l['name'])
            return _list, _map

    def getChannelPrivatelist(self):
        '''プライベートチャネルのリストと最終更新時間のマップ
        '''
        _list = []
        _map = {}
        API = f'{self.URL}/api/v1/groups.listAll'
        try:
            response = requests.get(
                API,
                headers=HEADERS,)    
        except Exception as e:
            print(f'{e}')
        finally:
            for l in response.json()['groups']:
                _map[l['name']] = l['_updatedAt']
                _list.append(l['name'])
            return _list, _map    
                
    def getChannelUserlist(self, obj_channel):
        '''チャネル毎の登録ID一覧
        '''
        # 結果全体格納するMap
        _map = {}
       
        # MSG送信API定義
        APIS = [f'{self.URL}/api/v1/channels.members',
                f'{self.URL}/api/v1/groups.members']
        # MSG発信チャンネル定義
        CHANNEL_LIST = obj_channel
        # 1000人は超えないだろう。。。から
        COUNT = '1000'
        
        for channel in CHANNEL_LIST:
            # MSG組み立て
            msg = (('roomName', channel),('count',COUNT),)
            
            # API発行
            for api in APIS:
                try:
                    response = requests.get(
                        api,
                        params=msg,
                        headers=HEADERS,)
                except Exception as e:
                    print(f'{e}')
                finally:
                    # ユーザたちを格納するList
                    _list = []
                    if response:
                        for l in response.json()['members']:
                            _list.append(f'{l["username"]}')
                        _map[channel] = _list
        return _map
    
    def getAllUserList(self):
        '''RocketChatに登録してあるすべてのIDリスト
        '''
        _list = []
        API = f'{self.URL}/api/v1/users.list'
        try:
            response = requests.get(
                API,
                headers=HEADERS,)
        except Exception as e:
            print(f'{e}')
        finally:
            for u in response.json()['users']:
                _list.append(u["username"])
            return _list


    def getDifftimeLastUpdateSec(self, _target):
        '''最終更新時間からの経過秒を返す
        
        Public,Privateそれぞれ指定が可能
        
        '''
        self._target = _target
        
        # 今時間生成
        jst_now = datetime.now(timezone('Asia/Tokyo'))
        target = parser.parse(_target).astimezone(timezone('Asia/Tokyo'))
        return (jst_now - target).total_seconds()
        
    def SendMessageToRocketChat(self, channel, msg):
        '''指定チャネルにメッセージを送る
        '''
        self.channel = channel
        self.msg = msg
        
        # MSG送信API定義
        API = f'{self.URL}/api/v1/chat.postMessage'
        
        # MSG組み立て
        msg = {
            'channel': self.channel,
            'text'   : self.msg,
        }
        
        # MSG送信
        try:
            response = requests.post(
                API,
                data=json.dumps(msg),
                headers=HEADERS,)
        except Exception as e:
            print(f'{e}')
        finally:
            pprint(response.status_code) 


# test
# Debug設定
__DEBUG__ = False

# object生成
R = RocketChatChannelManager()

# Public
list_Public, map_Public = R.getChannelPubliclist()
_map = R.getChannelUserlist(list_Public)
print(list_Public)
print(map_Public)
print(_map)
print('-'*30)

# Private
list_Private, map_Private = R.getChannelPrivatelist()
_map = R.getChannelUserlist(list_Private)
print(list_Private)
print(map_Private)
print(_map)
print('-'*30)

# 全UserList
list_AllUser = R.getAllUserList()
print(list_AllUser)
print('-'*30)

# 最終更新からの経過時間（秒）
for key, value in map_Public.items():
    print(key, R.getDifftimeLastUpdateSec(value))
for key, value in map_Private.items():
    print(key, R.getDifftimeLastUpdateSec(value))
print('-'*30)

# MSG送信
R.SendMessageToRocketChat('general','test from Class')

